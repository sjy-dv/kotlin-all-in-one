-- Spring Batch tables
DROP TABLE IF EXISTS `BATCH_JOB_EXECUTION`;
DROP TABLE IF EXISTS `BATCH_JOB_EXECUTION_CONTEXT`;
DROP TABLE IF EXISTS `BATCH_JOB_INSTANCE`;
DROP TABLE IF EXISTS `BATCH_JOB_PARAMS`;
DROP TABLE IF EXISTS `BATCH_JOB_STEP_EXECUTION`;
DROP TABLE IF EXISTS `BATCH_STEP_EXECUTION_CONTEXT`;
DROP TABLE IF EXISTS `BATCH_STEP_EXECUTION`;
DROP TABLE IF EXISTS `BATCH_STEP_EXECUTION_SEQ`;

--------------
CREATE TABLE BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,
    VERSION         BIGINT,
    JOB_NAME        VARCHAR(100) NOT NULL,
    JOB_KEY         VARCHAR(32) NOT NULL,
    constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
);

CREATE TABLE BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
    VERSION          BIGINT,
    JOB_INSTANCE_ID  BIGINT NOT NULL,
    CREATE_TIME      TIMESTAMP NOT NULL,
    START_TIME       TIMESTAMP DEFAULT NULL ,
    END_TIME         TIMESTAMP DEFAULT NULL ,
    STATUS           VARCHAR(10) ,
    EXIT_CODE        VARCHAR(2500) ,
    EXIT_MESSAGE     VARCHAR(2500) ,
    LAST_UPDATED     TIMESTAMP,
    JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
    constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
    references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
    VERSION          BIGINT,
    STEP_NAME        VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    START_TIME       TIMESTAMP NOT NULL ,
    END_TIME         TIMESTAMP DEFAULT NULL ,
    STATUS           VARCHAR(10) ,
    COMMIT_COUNT     BIGINT ,
    READ_COUNT       BIGINT ,
    FILTER_COUNT     BIGINT ,
    WRITE_COUNT      BIGINT ,
    READ_SKIP_COUNT  BIGINT ,
    WRITE_SKIP_COUNT BIGINT ,
    PROCESS_SKIP_COUNT BIGINT ,
    ROLLBACK_COUNT   BIGINT ,
    EXIT_CODE        VARCHAR(2500) ,
    EXIT_MESSAGE     VARCHAR(2500) ,
    LAST_UPDATED     TIMESTAMP,
    constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
    references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
    JOB_EXECUTION_ID BIGINT NOT NULL ,
    TYPE_CD         VARCHAR(6) NOT NULL ,
    KEY_NAME        VARCHAR(100) NOT NULL ,
    STRING_VAL      VARCHAR(250) ,
    DATE_VAL        TIMESTAMP ,
    LONG_VAL        BIGINT ,
    DOUBLE_VAL      DOUBLE PRECISION ,
    IDENTIFYING     CHAR(1) NOT NULL ,
    constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
    references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
    ID BIGINT(20) NOT NULL,
    PRIMARY KEY (ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID) VALUES(0);

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT ,
    constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
    references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);


CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
    ID BIGINT NOT NULL auto_increment,
    constraint STEP_EXEC_SEQ_PK primary key (ID)
);

INSERT INTO BATCH_STEP_EXECUTION_SEQ values(0);

CREATE TABLE BATCH_JOB_SEQ (
    ID BIGINT NOT NULL auto_increment,
    CONSTRAINT BATCH_JOB_SEQ_PK PRIMARY KEY (ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
    JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    STRING_VAL VARCHAR(250),
    DATE_VAL TIMESTAMP(6),
    LONG_VAL BIGINT,
    DOUBLE_VAL DOUBLE PRECISION,
    IDENTIFYING_CHAR CHAR(1) NOT NULL DEFAULT 'D',
    SHORT_CONTEXT VARCHAR(2500),
    SERIALIZED_CONTEXT LONGTEXT,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;